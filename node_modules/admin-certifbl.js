var express = require('express');
var df = require('dateformat');
var passport = require('passport');
var router = express.Router();
var mysql = require('mysql');
var cfg = require('config');
var sqlhelper = require('mysqlhelper2');
var mailer = require('nodemailer');
var produit;
var messageService;

/////////////////////////////////////////////////////////////////////////////////
//////////////////Route ADMIN////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/" ////////////////////////////////////////////////
router.get("/index.html", function (req, resp) {
    //si le user enregistré en session est different de nul (typeof verifi le type de donné)
    if (typeof req.user !== 'undefined') {
        //alors je renvoie le twig avec un tablo qui recupere les elements de username
        resp.render("admin/index.html.twig", { "username": req.user.username });
    }
    //sinon je renvoie le user a la page login pour authentification
    else {
        resp.redirect("/login.html");
    }
});

///////////////////////route "/index.html" ////////////////////////////////////////////////
router.get("/", function (req, resp) {
    //on crée une route qui recupere tous les liens de "/admin" et redirige sur la route principal de admin
    resp.redirect("/admin/index.html");
});


/////////////////////////////////////////////////////////////////////////////////
//////////////////Route log out admin////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

router.get("/logout.html", function (req, resp) {
    //on eteint la session et on redirige vers l'index publique
    req.logout();
    resp.redirect("/");

});

/////////////////////////////////////////////////////////////////////////////////
//////////////////Route ADMIN form_contact////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/" ////////////////////////////////////////////////
router.get("/form.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    //on se connecte à la bdd par le creatConnection avec les parametres de connexion
   
    //connection avec la bdd
  
    //on envoi un message pour verifier dans la console si la connection à bien été effectué
   // console.log('connnection mysql');
    //executer la query, soit inserer dans la tab email puis faire une fonction de calback
    //!!!!!!!!!!!!!!!!!!! Penser à changer par au nom de votre table qui recupere les email du formulaire de contact !!!!!!!!!!!!!!!!!!!!!
    sqlhelper.pool.query("SELECT * FROM contact_form", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi avec le message : ' + message);
        }
        //on log pour voir le mesage si il passe en fin de connection
        //console.log('connection end ' + message);
        //fin de connection    
      

        //console.log(' message hors de la fonction : ' + message);
        //si le user enregistré en session est different de nul (typeof verifie le type de donné et le transforme en chaine de caractere)
        if (typeof req.user !== 'undefined') {

            //alors je renvoie le twig avec un tablo qui recupere les elements de username et le tablo des mail a afficher
            resp.render("admin/contact_form.html.twig", { "form_email": rows });
        }
        //sinon je renvoie le user a la page login pour authentification
        else {
            resp.redirect("/login.html");
        }
    });
});


/////////////////////////////////////////////////////////////////////////////////
//////////////////Route modif envoi form statu admin////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/" ////////////////////////////////////////////////
router.get("/formenvoi/:id", function (req, resp) {
    var id = req.params.id;
    //UPDATE `email` SET `emailnotitificatino` = '1' WHERE `email`.`id` = 80; 


  //connection avec la bdd

  console.log('connnection mysql');

  //executer la query, soit inserer dans la tab email puis faire uje fonction de calback
  //!!!!!!!!!!!!!!!!!!! Penser à changer par au nom de votre table qui recupere les email du formulaire de contact !!!!!!!!!!!!!!!!!!!!!
  //connection.query("UPDATE `email` SET `emailnotitificatino` = '1' WHERE `email`.`id` = "+id+";  ",
   sqlhelper.pool.query("UPDATE contact_form SET emailnotification = 1 WHERE contact_form.id = ?;  ",
    //securisation des données envoyer en bdd 
    [id],
    //function qui renvoie une erreur si il y a un probleme
    function (err, rows, fields) {
      console.log("err :" + err);

      if (err != null) {
        message = "Il y a eu une erreur votre message n'a pas était envoyé";

        console.log(message + ' ----- ' + err);

      }
      else {
        message = "Votre message à bien été envoyer, merci ";

        console.log('message bien reussi avec le message : ' + message);
      }

      console.log('connection end ' + message);
     

      console.log(' message hors de la fonction : ' + message);
      resp.writeHead(200);
        resp.end();
      


    });
    
});

///////////////////////route "/produits.html" ////////////////////////////////////////////////

router.get("/produits.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `products` WHERE `deleted`=0", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
            //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/produits.html.twig", { "username": req.user.username, "produits": rows, "message": message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }
    
            }  
    });
});


///////////////////////route "/touslesclients.html" ////////////////////////////////////////////////

router.get("/touslesclients.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `customers` WHERE `deleted`=0", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
            //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/touslesclients.html.twig", { "username": req.user.username, "clients": rows, "message": message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }
    
            }  
    });
});



///////////////////////route "/modifclient/id" avec affichage pour modification ulterieur d'un produit ////////////////////////////////////////////////

router.get("/modifclient/:id", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    var id = req.params.id;
    
    

    //Alors on passe second query pour la modification d'un produit recuperer par son id
                    sqlhelper.pool.query("SELECT * FROM `customers` WHERE `id`="+id+"", function (err, rows, fields) {
                   
                    
                     
                        //function qui renvoie une erreur si il y a un probleme
                        // on verifie dans la console le valeur de err pour voir si il y a une erreur
                        //console.log("err :" + err);
                        //si il y a une erreur donc si la valeur err est differente de null
                        if (err != null) {
                            //on enregistre le message d'erreur'
                            message = "Il y a eu une erreur dans la query";
                            //on log pour voir le mesage si il passe
                            //console.log(message + ' ----- ' + err);

                        }
                        else {
                            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                            message = "La recuperation des données c'est bien passé ";
                            //on log pour voir le mesage si il passe
                            console.log('message bien reussi avec le message : ' + message);



                            //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                            if (typeof req.user !== 'undefined') {
                                //console.log("Un produit 22:" + JSON.stringify(produit));
                                //alors je renvoie le twig avec un tablo qui recupere les elements de username
                            
                                resp.render("admin/client_modif.html.twig", { "username": req.user.username, "client": rows });
                            }
                            //sinon je renvoie le user a la page login pour authentification
                            else {
                                resp.redirect("/login.html");
                            }         

                        }
                    });


    
});


///////////////////////route "/modif/id" avec affichage pour modification ulterieur d'un produit ////////////////////////////////////////////////

router.get("/modif/:id", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    var id = req.params.id;
    
    

    //Alors on passe second query pour la modification d'un produit recuperer par son id
                    sqlhelper.pool.query("SELECT * FROM `products` WHERE `id`="+id+"", function (err, rows, fields) {
                   
                    
                     
                        //function qui renvoie une erreur si il y a un probleme
                        // on verifie dans la console le valeur de err pour voir si il y a une erreur
                        //console.log("err :" + err);
                        //si il y a une erreur donc si la valeur err est differente de null
                        if (err != null) {
                            //on enregistre le message d'erreur'
                            message = "Il y a eu une erreur dans la query";
                            //on log pour voir le mesage si il passe
                            //console.log(message + ' ----- ' + err);

                        }
                        else {
                            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                            message = "La recuperation des données c'est bien passé ";
                            //on log pour voir le mesage si il passe
                            console.log('message bien reussi avec le message : ' + message);



                            //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                            if (typeof req.user !== 'undefined') {
                                //console.log("Un produit 22:" + JSON.stringify(produit));
                                //alors je renvoie le twig avec un tablo qui recupere les elements de username
                            
                                resp.render("admin/prod_modif.html.twig", { "username": req.user.username, "produit": rows });
                            }
                            //sinon je renvoie le user a la page login pour authentification
                            else {
                                resp.redirect("/login.html");
                            }         

                        }
                    });


    
});



///////////////////////route "/modif/id" avec affichage pour modification ulterieur d'un produit ////////////////////////////////////////////////

router.post("/modif/:id", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    var id = req.params.id;

    var label = req.body.label;
    var description = req.body.description;
    var prix = req.body.prix;
    var image = req.body.image;
    var tva = req.body.tva;
    var quantiteM = req.body.qutM;
    var quantiteE = req.body.qutE;
    var idFournisseur = req.body.idF;
    console.log('label : '+label);
    console.log('description : '+description);
    console.log('prix : '+prix);
    console.log('image : '+image);
    console.log('tva : '+tva);
    console.log('quantite magasin : '+quantiteM);
    console.log('quantite entrpot : '+quantiteE);
    console.log('Fournisseur: '+idFournisseur);
    
    

    //Alors on passe second query pour la modification d'un produit recuperer par son id
    //UPDATE `products` SET `label` = 'Couteau suisse2', `description` = 'Couteau suisse Couteau suisse Couteau suisse Couteau suisse Couteau suissef', `price` = '551', `picture` = 'images/fa1.jpg', `idvat` = '4', `deleted` = '0', `stock` = '56' WHERE `products`.`id` = 15;
                    sqlhelper.pool.query("UPDATE `products` SET `label` = ?, `description` = ?, `price` = ?, `picture` = ?, `idvat` = ?, `deleted` = '0', `stock` = ?, `stockEntrepot` = ?, `idFournisseur` = ? WHERE `products`.`id` ="+id+";",
                    [label,description,prix,image,tva,quantiteM,quantiteE,idFournisseur],
                    function (err, rows, fields) {
                   
                     
                        //function qui renvoie une erreur si il y a un probleme
                        // on verifie dans la console le valeur de err pour voir si il y a une erreur
                        //console.log("err :" + err);
                        //si il y a une erreur donc si la valeur err est differente de null
                        if (err != null) {
                            //on enregistre le message d'erreur'
                            message = "Il y a eu une erreur dans la query";
                            //on log pour voir le mesage si il passe
                            console.log(message + ' ----- ' + err);

                        }
                        else {
                            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                            message = "La mise à jours des données c'est bien passé ";
                            //on log pour voir le mesage si il passe
                            console.log('message bien reussi avec le message : ' + message);

                            
                        }
                    });


    //si le user enregistré en session est different de nul (typeof verifi le type de donné)
    if (typeof req.user !== 'undefined') {
        
        //alors je renvoie le twig avec un tablo qui recupere les elements de username
       
        resp.redirect("/admin/produits.html");
    }
    //sinon je renvoie le user a la page login pour authentification
    else {
        resp.redirect("/login.html");
    }
});



///////////////////////route "/ajouter.html" ////////////////////////////////////////////////

router.post("/ajout/", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    //on recupere les donnés du formulaire ajouter
    var label = req.body.label;
    var description = req.body.description;
    var prix = req.body.prix;
    var image = req.body.image;
    var tva = req.body.tva;
    var quantiteM = req.body.qutM;
    var quantiteE = req.body.qutE;
    var idFournisseur = req.body.idF;
    console.log('label : '+label);
    console.log('description : '+description);
    console.log('prix : '+prix);
    console.log('image : '+image);
    console.log('tva : '+tva);
    console.log('quantite magasin : '+quantiteM);
    console.log('quantite entrpot : '+quantiteE);
    console.log('Fournisseur: '+idFournisseur);


    // query : INSERT INTO `products` (`id`, `label`, `description`, `ref`, `price`, `picture`, `idvat`, `deleted`, `stock`) VALUES 
    // (NULL, label, description, '', prix, image, 'tva', '0', 'quantite');
    //INSERT INTO `products` (`id`, `label`, `description`, `ref`, `price`, `picture`, `idvat`, `deleted`, `stock`) VALUES (NULL, 'jardinniere2', 'jardinniere jardinnierejardinniere jardinniere jardinniere2 ', '', '65', 'df', '2', '0', '61')
     sqlhelper.pool.query("INSERT INTO `products` (`id`, `label`, `description`, `ref`, `price`, `picture`, `idvat`, `deleted`, `stock`, `stockEntrepot`, `idFournisseur`) VALUES (NULL, ?, ?, '', ?, ?, ?, '0', ?,?,?);",
     [label,description,prix,image,tva,quantiteM,quantiteE,idFournisseur],
     function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "L'ajout du produit"+label+" à bien été pris en compte";
            //on log pour voir le mesage si il passe
            console.log('Action bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        }
        //on log pour voir le mesage si il passe en fin de connection
        console.log('connection end ' + message);
        //fin de connection    


    //si le user enregistré en session est different de nul (typeof verifi le type de donné)
    if (typeof req.user !== 'undefined') {
        //alors je renvoie le twig avec un tablo qui recupere les elements de username
        resp.redirect("/admin/produits.html");
    }
    //sinon je renvoie le user a la page login pour authentification
    else {
        resp.redirect("/login.html");
    }

    });
});

//////////////////////route "supprimer" ////////////////////////////////////////////////
router.get("/sup/:id", function (req, resp) {
    var id = req.params.id;
    //UPDATE `products` SET `deleted` = '1' WHERE `products`.`id` = id; 
    sqlhelper.pool.query("UPDATE `products` SET `deleted` = '1' WHERE `products`.`id` = ?;  ",
    //securisation des données envoyer en bdd 
    [id],
    //function qui renvoie une erreur si il y a un probleme
    function (err, rows, fields) {
      console.log("err :" + err);

      if (err != null) {
        message = "Il y a eu une erreur ";

        console.log(message + ' ----- ' + err);

      }
      else {
        message = "Votre produit à bien été supprimer ";

        console.log('message bien reussi avec le message : ' + message);
      }

      console.log('connection end ' + message);
     

      console.log(' message hors de la fonction : ' + message);
      resp.redirect("/admin/produits.html");
      


    });

});


///////////////////////route "/client.html" ////////////////////////////////////////////////
router.get("/client.html", function (req, resp) {

    // query : SELECT * FROM `products` WHERE `deleted`=0 
    //"SELECT * FROM `orders` WHERE `status` = 'en cours de livraison' AND `fournisseur`=0"
     sqlhelper.pool.query("SELECT * FROM `orders` WHERE `status` = 'livré' AND `fournisseur`=0", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/client.html.twig", { "username": req.user.username,"clients":rows, "message":message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });

});

///////////////////////route "/client/:date&:date2" - filtre avec les dates -////////////////////////////////////////////////
router.get("/client/:date&:date2/", function (req, resp) {
var dateFiltre = req.params.date;
var dateFiltre2 = req.params.date2;

console.log('recuperation de la date : '+dateFiltre);
console.log('recuperation de la date2 : '+dateFiltre2);

    // query : SELECT * FROM `orders` WHERE `statusdate` BETWEEN '2016-12-01 00:00:00' AND '2016-12-14 00:00:00'
     sqlhelper.pool.query("SELECT * FROM `orders` WHERE `statusdate` BETWEEN ? AND ?" ,[dateFiltre,dateFiltre2], function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/client.html.twig", { "username": req.user.username,"clients":rows, "message":message,"date1":dateFiltre,"date2":dateFiltre2 });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });

});

///////////////////////route "/fournisseur.html" --- Commande fournisseur ---////////////////////////////////////////////////
router.get("/fournisseur.html", function (req, resp) {

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `orders` WHERE `fournisseur`=1 AND `encours2livr`=1", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/fournisseur.html.twig", { "username": req.user.username,"fournisseurs":rows, "message":message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});





///////////////////////route "/fournisseur/:date1&:date2" --- Commande fournisseur ---////////////////////////////////////////////////
router.get("/fournisseur/:date&:date2", function (req, resp) {
var dateFiltre = req.params.date;
var dateFiltre2 = req.params.date2;

console.log('recuperation de la date : '+dateFiltre);
console.log('recuperation de la date2 : '+dateFiltre2);

    // query : SELECT * FROM `products` WHERE `deleted`=0 
    sqlhelper.pool.query("SELECT * FROM `orders` WHERE `fournisseur`=1 AND `statusdate` BETWEEN ? AND ?" ,[dateFiltre,dateFiltre2], function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/fournisseur.html.twig", { "username": req.user.username,"fournisseurs":rows, "message":message,"date1":dateFiltre,"date2":dateFiltre2 });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});







///////////////////////route "/fournisseurs.html" -- Tous les fournisseurs --////////////////////////////////////////////////
router.get("/fournisseurs.html", function (req, resp) {

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `fournisseur` ", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/fournisseurs.html.twig", { "username": req.user.username,"fournisseurs":rows, "message":message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});



///////////////////////route "/fournisseur/:id" -- Info sur le fournisseur dont l'id est :id' --////////////////////////////////////////////////
router.get("/fournisseur/:id", function (req, resp) {

    var message = null;
    var id = req.params.id;

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `fournisseur` WHERE `id`="+id+"", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/fournid.html.twig", { "username": req.user.username,"fournisseurs":rows, "message":message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});



///////////////////////route "/encoursclient.html" -- Toutes les commandes clients en cours de livraison --////////////////////////////////////////////////
router.get("/encoursclient.html", function (req, resp) {

    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `orders` WHERE `status` = 'en cours de livraison' AND `fournisseur`=0 ", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/encoursclient.html.twig", { "username": req.user.username,"clients":rows, "message":message });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});



///////////////////////route "/encoursclient/id" -- changement de status pour la commande clients(id) en cours de livraison --////////////////////////////////////////////////
router.get("/encoursclient/:id&:qto&:idp", function (req, resp) {
    var messageService = null;
    //id de la commande
    var id = req.params.id;
    // quantité de la commande
    var qto = req.params.qto;
    //id du produit
    var idp = req.params.idp;
    //quantité en stock dans le magasin
    var qtm;
    //quantité en stock dans l'entrepot
    var qte;
    //on verifie la recuperation des données
    console.log("Debut : ######## -> id : "+id+" quantite : "+qto+" id product : "+idp);
     //--------------------------------------------------------------------------------------------
     //On change le status de la commande en livré - par cette action il decoule toute la gestion des stocks magasin et entrepot 
     sqlhelper.pool.query("UPDATE `orders` SET `status` = 'livré' WHERE `orders`.`id` = ?;",[id], function (err, rows, fields) {

        console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur
            //message = "Il y a eu une erreur dans la query pour le changement de status (livré)";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);
        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            //message = "La mise à jours des données pour le status livré de la commande :"+id+" c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));

            //--------------------------------------------------------------------------------------------
            //on recupere les infos du produits 
            sqlhelper.pool.query("SELECT * FROM `products` WHERE `id` = ?",[idp], function (err, rows, fields) {
                //console.log('Tous le produit: '+JSON.stringify(rows));
                //on recupere dans la variable qtm le stock magasin
                qtm = rows[0].stock;
                //console.log('------------------ !!! -------- > Stock magasin : ' + qtm);
                //on recupere dans la variable qte le stock entrepot
                qte = rows[0].stockEntrepot;
                //console.log('------------------ !!! -------- > Stock Entrepot : ' + qte);
                //si il y a une erreur donc si la valeur err est differente de null
                if (err != null) {
                    //on enregistre le message d'erreur'
                    //message = "Il y a eu une erreur dans la query";
                    //on log pour voir le mesage si il passe
                    //console.log(message + ' ----- ' + err);
                }
                else {
                         //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                        //message = "la recuperation des donnés du produit :"+idp+" c'est bien passé ";
                        //on log pour voir le mesage si il passe
                        //console.log('message bien reussi : ' + message);
                        //console.log('Tous les produits: '+JSON.stringify(rows));
                }
                //--------------------------------------------------------------------------------------------
                //--------------------------------------------------------------------------------------------
                //--------------------------------------------------------------------------------------------
                //si la quntité du magasin est plus petite que 20 alors :    
                if (qtm<20) {
                         //--------------------------------------------------------------------------------------------
                        //--------------------------------------------------------------------------------------------
                        //on verifie si la quantité de l'entrepot est plus petite de 50 alors :
                        if(qte<50){
                           
                            //alors on envoie un mail au fournisseur pour recuperer 100 unité du produit en question
                            var transporter = mailer.createTransport('smtps://'+cfg.MAIL.smtpuser+'%40gmail.com:'+cfg.MAIL.smtppassword+'@smtp.gmail.com');
                            var mailoptions ={
                                    //l'envoyeur
                                    from :"webmbeaucaire@gmail.com",
                                    //recever
                                    to :"webmbeaucaire@gmail.com",
                                    //sujet du message
                                    Subject :"Demande de commande du produit xxxxx ",
                                    //format texte
                                    text :"Bonjour, par la presente nous vous commendons 100 unité du produit : XXXXX, pour le plus vite possible, merci. M le President de la rose du futur",
                                    //format html
                                    html :"<p>Bonjour, par la presente nous vous commendons 100 unité du produit : XXXXX, pour le plus vite possible, merci. M le President de la rose du futur </p>"
                                    //option obligatoire sinon il ne marche pas
                            }
                            transporter.sendMail(mailoptions,function(err,info){
                                //si j'ai une erreur je l'ecris dans la console le return permet de sortir de la fonction et de ne pas afficher le suivant
                                if(err) return console.log(err);

                                console.log('Message Email bien envoyé au fournisseur !'); 

                            });
                            messageService ="A cause d'une quantité insufisante pour le produit : "+idp+" le systeme a envoyé un email au fournisseur pour passer commande de 100 unités de plus";
                            //on ferme la connexion smtp
                            transporter.close();
                            
                            
                        }
                        //--------------------------------------------------------------------------------------------
                        //--------------------------------------------------------------------------------------------
                        //sinon
                        else{
                            console.log("Nous avons mis le systeme à jours basculant 20 unités (en base de données) du produit "+idp+"de l'entrepot vers le magasins, veuillez suivre la procedure physiquement, merci");
                        //--------------------------------------------------------------------------------------------
                        //--------------------------------------------------------------------------------------------
                            //on enleve 20 quantie de l'entrepot et on les bascules dans le magasin
                            messageService ="Nous avons mis le systeme à jours basculant 20 unités (en base de données) du produit "+idp+"de l'entrepot vers le magasins, veuillez suivre la procedure physiquement, merci";
                            var qtm2=qtm+20;
                            var qte2=qte-20;
                            //UPDATE `products` SET `stock` = '21', `stockEntrepot` = '100' WHERE `products`.`id` = 11; 
                            sqlhelper.pool.query("UPDATE `products` SET `stock` = ?, `stockEntrepot` = ? WHERE `products`.`id` = ?;",[qtm2,qte2,idp], function (err, rows, fields) {
                                //function qui renvoie une erreur si il y a un probleme
                                // on verifie dans la console le valeur de err pour voir si il y a une erreur
                                console.log("Update qunatite :");
                                console.log("err :" + err);
                                //si il y a une erreur donc si la valeur err est differente de null
                                if (err != null) {
                                    //on enregistre le message d'erreur'
                                    message = "Il y a eu une erreur dans la query";
                                    //on log pour voir le mesage si il passe
                                    console.log(message + ' ----- ' + err);

                                }
                                else {


                                        //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                                        message = "La mise à jours de la nouvelle quantité ("+qto+") du produit :"+idp+" c'est bien passé ";
                                        //on log pour voir le mesage si il passe
                                        console.log('message bien reussi : ' + message);
                                        //console.log('Tous les produits: '+JSON.stringify(rows));
                            


                                }

                            });    
                                
                                
                            console.log('on enleve 20 quantie de l\'entrepot et on les bascules dans le magasin'); 

                        }
                         //--------------------------------------------------------------------------------------------
                        //--------------------------------------------------------------------------------------------

            }
            else{
                
                var qtm2 = qtm-qto;
                //UPDATE `products` SET `stock` = '50' WHERE `products`.`id` = 20; 
                sqlhelper.pool.query("UPDATE `products` SET `stock` = ? WHERE `products`.`id` = ?;",[qtm2,idp], function (err, rows, fields) {
                                //function qui renvoie une erreur si il y a un probleme
                                // on verifie dans la console le valeur de err pour voir si il y a une erreur
                                console.log("Update qunatite :");
                                console.log("err :" + err);
                                //si il y a une erreur donc si la valeur err est differente de null
                                if (err != null) {
                                    //on enregistre le message d'erreur'
                                    message = "Il y a eu une erreur dans la query";
                                    //on log pour voir le mesage si il passe
                                    console.log(message + ' ----- ' + err);

                                }
                                else {


                                        //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                                        messageService = "La mise à jours de la nouvelle quantité ("+qto+") du produit :"+idp+" c'est bien passé ";
                                        //on log pour voir le mesage si il passe
                                        console.log('message bien reussi : ' + message);
                                        //console.log('Tous les produits: '+JSON.stringify(rows));

                                }

                            });  

                }
                console.log("Nous avons mis le systeme à jours basculant "+qto+" unité(s) (en base de données) du produit "+idp+" pour les stocks magasins, merci");
                messageService ="Nous avons mis le systeme à jours basculant "+qto+" unité(s) (en base de données) du produit "+idp+" pour les stocks magasins, merci";
            });
           
            
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    console.log('message data envant envoie : '+messageService);
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                   resp.status(200).end('',messageService);
                   
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});




///////////////////////route "/encoursfourniseur.html" -- Toutes les commandes en cours des fournisseurs --////////////////////////////////////////////////
router.get("/encoursfourniseur.html", function (req, resp) {
    var codeorder;
    //SELECT P.label, P.stock, P.stockEntrepot, O.quantity, O.id, O.price FROM orders O, products P WHERE O.idproduct = P.id AND  O.fournisseur=1 AND O.encours2livr=0
    //
     sqlhelper.pool.query("SELECT P.label, P.stock, P.stockEntrepot, O.quantity, O.id, O.price, O.statusdate, O.codeorder, O.idcustomer, o.idproduct FROM orders O, products P WHERE O.idproduct = P.id AND O.fournisseur=1 AND O.encours2livr=2", function (err, rows, fields) {
     codeorder =rows[codeorder];
     console.log(' codeorder : ' + codeorder);
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        
        
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/encoursfourniseur.html.twig", { "username": req.user.username,"fournisseurs":rows });
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});


///////////////////////route "/encoursfourniseur.html" -- Toutes les commandes en cours des fournisseurs --////////////////////////////////////////////////
router.get("/encoursfourniseur/:idp&:qtp&:ste&:ido", function (req, resp) {
    var idp = req.params.idp;
    console.log(' id produit : ' + idp);
    var qtp = Number(req.params.qtp);
    console.log(' quantité produit : ' + qtp);
    var ste = Number(req.params.ste);
    console.log(' stock entrepot : ' + ste);
    var ido = Number(req.params.ido);
    console.log(' id commande : ' + ido);
    var ido2 = ido-1;
    var newq=qtp+ste;
    console.log(' Nouvel quantité: ' + newq);
    //SELECT P.label, P.stock, P.stockEntrepot, O.quantity, O.id, O.price FROM orders O, products P WHERE O.idproduct = P.id AND  O.fournisseur=1 AND O.encours2livr=0
    //
     sqlhelper.pool.query("UPDATE `products` SET `stockEntrepot` = ? WHERE `products`.`id` = ?;",[newq,idp], function (err, rows, fields) {
     
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        
        
        if (err != null) {
            //on enregistre le message d'erreur'
            message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            console.log(message + ' ----- ' + err);

        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            //message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));


            
            //UPDATE `orders` SET `encours2livr` = '3' WHERE `orders`.`id` = ido; 

             sqlhelper.pool.query("UPDATE `orders` SET `encours2livr` = 1 WHERE `orders`.`id` =  ?;",[ido], function (err, rows, fields) {
                    if (err != null) {
                //on enregistre le message d'erreur'
                message = "Il y a eu une erreur dans la query ido";
                //on log pour voir le mesage si il passe
                console.log(message + ' ----- ' + err);

            }
            else {
                
            message = "La recuperation des données c'est bien passé ido1";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            }

        });

        sqlhelper.pool.query("UPDATE `orders` SET `encours2livr` = 1 WHERE `orders`.`id` =  ?;",[ido2], function (err, rows, fields) {
                    if (err != null) {
                //on enregistre le message d'erreur'
                message = "Il y a eu une erreur dans la query ido";
                //on log pour voir le mesage si il passe
                console.log(message + ' ----- ' + err);

            }
            else {
                
            message = "La recuperation des données c'est bien passé ido1";
            //on log pour voir le mesage si il passe
            console.log('message bien reussi avec le message : ' + message);
            }

        });



        
             //si le user enregistré en session est different de nul (typeof verifi le type de donné)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.status(200).end('Vatre action livré a bien été pris en compte');
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }

            }  
    });
});



//exportation du module
module.exports = router;
